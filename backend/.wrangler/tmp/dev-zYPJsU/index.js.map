{
  "version": 3,
  "sources": ["../bundle-FBAqQq/checked-fetch.js", "wrangler-modules-watch:wrangler:modules-watch", "../../../node_modules/wrangler/templates/modules-watch-stub.js", "../../../src/lib/db.ts", "../../../src/lib/etag.ts", "../../../src/lib/openai.ts", "../../../src/lib/aiAnalysis.ts", "../../../src/jobs/analysisWorker.ts", "../bundle-FBAqQq/middleware-loader.entry.ts", "../bundle-FBAqQq/middleware-insertion-facade.js", "../../../src/index.ts", "../../../src/handlers/health.ts", "../../../src/lib/responses.ts", "../../../src/handlers/analysis/byHash.ts", "../../../src/lib/r2.ts", "../../../src/handlers/analysis/analyze.ts", "../../../src/handlers/analysis/byProductId.ts", "../../../src/handlers/search.ts", "../../../src/handlers/history.ts", "../../../src/lib/rateLimit.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../../../node_modules/wrangler/templates/middleware/common.ts"],
  "sourceRoot": "C:\\Users\\willi\\Qwen3Online\\backend\\.wrangler\\tmp\\dev-zYPJsU",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "", "// `esbuild` doesn't support returning `watch*` options from `onStart()`\n// plugin callbacks. Instead, we define an empty virtual module that is\n// imported by this injected file. Importing the module registers watchers.\nimport \"wrangler:modules-watch\";\n", "import type { Env } from \"../index\";\r\n\r\nexport type Row = Record<string, unknown>;\r\n\r\nexport function getDb(env: Env): D1Database {\r\n  return env.LABELSLAYER_D1;\r\n}\r\n\r\nexport async function query<T = Row>(db: D1Database, sql: string, params: any[] = []): Promise<T[]> {\r\n  const stmt = db.prepare(sql);\r\n  const bound = params.length ? stmt.bind(...params) : stmt;\r\n  const res = await bound.all<T>();\r\n  return res.results || [];\r\n}\r\n\r\nexport async function run(db: D1Database, sql: string, params: any[] = []): Promise<void> {\r\n  const stmt = db.prepare(sql);\r\n  const bound = params.length ? stmt.bind(...params) : stmt;\r\n  await bound.run();\r\n}", "export async function makeEtag(obj: unknown, salt: string | undefined): Promise<string> {\r\n  const enc = new TextEncoder();\r\n  const input = JSON.stringify(obj ?? {}) + String(salt ?? \"\");\r\n  const data = enc.encode(input);\r\n  const digest = await crypto.subtle.digest(\"SHA-256\", data);\r\n  const bytes = Array.from(new Uint8Array(digest));\r\n  const hex = bytes.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\");\r\n  return `\"W/${hex.slice(0, 32)}\"`; // weak ETag\r\n}", "import type { Env } from \"../index\";\r\n\r\ntype VisionInput =\r\n  | { imageUrl: string; pHash?: string }\r\n  | { imageBase64: string; mimeType?: string; pHash?: string };\r\n\r\nexport type VisionResult = {\r\n  ok: boolean;\r\n  summary: string;\r\n  tags: string[];\r\n  confidence: number;\r\n  source: \"stub\" | \"openai\";\r\n};\r\n\r\nexport async function requestGpt4oVision(env: Env, input: VisionInput, timeoutMs = 5000): Promise<VisionResult> {\r\n  if (!env.OPENAI_API_KEY) {\r\n    const marker = \"imageUrl\" in input ? input.imageUrl : input.imageBase64.slice(0, 16);\r\n    const pHash = \"pHash\" in input && input.pHash ? input.pHash : \"unknown\";\r\n    return {\r\n      ok: true,\r\n      summary: `Mock analysis for ${pHash}`,\r\n      tags: [\"mock\", \"label\", \"nutrition\"],\r\n      confidence: 0.42,\r\n      source: \"stub\",\r\n    };\r\n  }\r\n  // Real call outline (kept behind key presence, avoid leaking secrets)\r\n  const controller = new AbortController();\r\n  const id = setTimeout(() => controller.abort(), timeoutMs);\r\n  try {\r\n    const body = {\r\n      model: \"gpt-4o-mini\",\r\n      messages: [\r\n        {\r\n          role: \"user\",\r\n          content: [\r\n            { type: \"text\", text: \"Analyze this product label and summarize key nutrition and allergens.\" },\r\n            \"imageUrl\" in input\r\n              ? { type: \"image_url\", image_url: input.imageUrl }\r\n              : { type: \"image\", image_base64: input.imageBase64, mime_type: input.mimeType ?? \"image/jpeg\" },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n    const res = await fetch((env.OPENAI_BASE_URL ?? \"https://api.openai.com/v1\") + \"/chat/completions\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Authorization\": `Bearer ${env.OPENAI_API_KEY}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(body),\r\n      signal: controller.signal,\r\n    });\r\n    const json = await res.json().catch(() => ({}));\r\n    const text =\r\n      json?.choices?.[0]?.message?.content ||\r\n      json?.choices?.[0]?.message?.text ||\r\n      \"No content from OpenAI\";\r\n    return {\r\n      ok: res.ok,\r\n      summary: String(text).slice(0, 512),\r\n      tags: [],\r\n      confidence: res.ok ? 0.9 : 0.0,\r\n      source: \"openai\",\r\n    };\r\n  } catch (_e) {\r\n    return {\r\n      ok: false,\r\n      summary: \"OpenAI request failed\",\r\n      tags: [],\r\n      confidence: 0,\r\n      source: \"openai\",\r\n    };\r\n  } finally {\r\n    clearTimeout(id);\r\n  }\r\n}", "import { ProductAnalysisData, IngredientAnalysis } from '../types/api';\nimport { run } from './db';\n\nexport function generateMockAnalysis(pHash: string): ProductAnalysisData {\n  // Deterministic mock based on pHash for consistent results\n  const hashNum = parseInt(pHash.substring(0, 4), 16);\n  const rating = 40 + (hashNum % 50); // 40-90 range\n  \n  // Generate different product types based on hash\n  const productTypes = ['Organic Milk', 'Whole Grain Bread', 'Greek Yogurt', 'Almond Butter', 'Protein Bar'];\n  const productIndex = hashNum % productTypes.length;\n  const baseProduct = productTypes[productIndex] || 'Generic Product';\n  \n  return {\n    name: `${baseProduct} ${pHash.substring(0, 6)}`,\n    description: `Analyzed ${baseProduct.toLowerCase()} product with pHash ${pHash}. ${rating >= 70 ? 'High quality ingredients with minimal processing.' : rating >= 50 ? 'Good quality with some processed ingredients.' : 'Highly processed with multiple additives.'}`,\n    rating,\n    ratingColor: rating >= 70 ? \"#4caf50\" : rating >= 50 ? \"#ff9800\" : \"#f44336\",\n    ingredients: generateMockIngredients(rating, productIndex),\n    concerns: rating < 60 ? generateMockConcerns(rating) : []\n  };\n}\n\nfunction generateMockIngredients(rating: number, productType: number): IngredientAnalysis[] {\n  const baseIngredients: IngredientAnalysis[] = [\n    {\n      name: \"Water\",\n      rating: \"neutral\",\n      description: \"Primary ingredient in most food products, provides hydration\",\n      benefits: [\"Hydration\", \"Solvent for nutrients\"],\n      concerns: []\n    }\n  ];\n\n  if (rating >= 70) {\n    // High quality product\n    baseIngredients.push({\n      name: \"Organic Oats\",\n      rating: \"good\", \n      description: \"Whole grain oats rich in fiber and protein\",\n      benefits: [\"Heart Health\", \"Fiber\", \"Sustained Energy\"],\n      concerns: []\n    });\n    baseIngredients.push({\n      name: \"Natural Vanilla Extract\",\n      rating: \"good\",\n      description: \"Pure vanilla extract from vanilla beans\",\n      benefits: [\"Natural Flavoring\", \"Antioxidants\"],\n      concerns: []\n    });\n  } else if (rating >= 50) {\n    // Medium quality\n    baseIngredients.push({\n      name: \"Enriched Flour\",\n      rating: \"neutral\",\n      description: \"Wheat flour with added vitamins and minerals\",\n      benefits: [\"Fortified Nutrients\", \"Energy\"],\n      concerns: [\"Processed Grain\"]\n    });\n    baseIngredients.push({\n      name: \"Natural Flavors\",\n      rating: \"neutral\", \n      description: \"Flavor compounds derived from natural sources\",\n      benefits: [\"Taste Enhancement\"],\n      concerns: [\"Vague Labeling\"]\n    });\n  } else {\n    // Lower quality\n    baseIngredients.push({\n      name: \"High Fructose Corn Syrup\",\n      rating: \"bad\",\n      description: \"Processed sweetener linked to health concerns\",\n      benefits: [\"Sweetness\", \"Preservation\"],\n      concerns: [\"Blood Sugar Spikes\", \"Linked to Obesity\"]\n    });\n    baseIngredients.push({\n      name: \"Artificial Colors\",\n      rating: \"bad\",\n      description: \"Synthetic food coloring agents\",\n      benefits: [\"Visual Appeal\"],\n      concerns: [\"Hyperactivity in Children\", \"Artificial Additives\"]\n    });\n  }\n\n  return baseIngredients;\n}\n\nfunction generateMockConcerns(rating: number): string[] {\n  const concerns = [];\n  \n  if (rating < 40) {\n    concerns.push(\"High in artificial additives and preservatives\");\n    concerns.push(\"Contains multiple processed ingredients\");\n    concerns.push(\"High sugar content (>15g per serving)\");\n  } else if (rating < 60) {\n    concerns.push(\"Contains some processed ingredients\");\n    concerns.push(\"Moderate sugar content\");\n  }\n  \n  return concerns;\n}\n\nexport async function createOrFindProduct(\n  analysisData: ProductAnalysisData, \n  db: Parameters<typeof run>[0]\n): Promise<string> {\n  const productId = `prod-${crypto.randomUUID()}`;\n  \n  try {\n    await run(\n      db,\n      `INSERT OR IGNORE INTO products (id, name, brand, analysis_generated, created_at, updated_at)\n       VALUES (?, ?, ?, ?, ?, ?)`,\n      [\n        productId,\n        analysisData.name,\n        null, // Extract from AI if available in future\n        true,\n        new Date().toISOString(),\n        new Date().toISOString()\n      ]\n    );\n    \n    return productId;\n  } catch (error) {\n    console.error('Error creating product:', error);\n    throw new Error('Failed to create product record');\n  }\n}\n\n// Future: Real AI analysis function\nexport async function parseAIAnalysis(visionResult: string): Promise<ProductAnalysisData> {\n  // TODO: Implement OpenAI GPT-4o vision result parsing\n  // For now, return enhanced mock\n  return generateMockAnalysis(Math.random().toString(36).substring(7));\n}", "import type { Env } from \"../index\";\r\nimport { getDb, query, run } from \"../lib/db\";\r\nimport { makeEtag } from \"../lib/etag\";\r\nimport { callContext7, callSequential } from \"../lib/mcp\";\r\nimport { requestGpt4oVision } from \"../lib/openai\";\r\nimport { generateMockAnalysis, createOrFindProduct, parseAIAnalysis } from \"../lib/aiAnalysis\";\r\nimport { ProductAnalysisData } from \"../types/api\";\r\n\r\ntype AnalysisJob = {\r\n  analysisId: string;\r\n  pHash: string;\r\n  r2Key?: string | null;\r\n  image?: { url?: string; base64Size?: number };\r\n};\r\n\r\nexport async function processAnalysisJob(msg: { body: AnalysisJob }, env: Env, _ctx: ExecutionContext): Promise<void> {\r\n  const { analysisId, pHash } = msg.body;\r\n  const db = getDb(env);\r\n\r\n  // Idempotency: load existing record status\r\n  const existing = await query<any>(\r\n    db,\r\n    `SELECT status FROM analysis_records WHERE analysis_id = ? LIMIT 1`,\r\n    [analysisId]\r\n  );\r\n  if (!existing.length) {\r\n    // Unknown job; ignore\r\n    return;\r\n  }\r\n  const current = String(existing[0].status);\r\n  if (current === \"succeeded\" || current === \"failed\") {\r\n    return; // already done\r\n  }\r\n\r\n  // If there is already a latest succeeded record for this pHash at current schema version, skip re-analysis\r\n  const latest = await query<any>(\r\n    db,\r\n    `SELECT analysis_id, summary, etag, product_id, analysis_data_json\r\n     FROM analysis_records\r\n     WHERE phash = ? AND status = 'succeeded'\r\n     ORDER BY updated_at DESC\r\n     LIMIT 1`,\r\n    [pHash]\r\n  );\r\n  if (latest.length) {\r\n    // Link current analysis_id to the same product and etag without recomputation\r\n    const { product_id, summary, etag, analysis_data_json } = latest[0];\r\n    await run(\r\n      db,\r\n      `UPDATE analysis_records\r\n       SET status = 'succeeded', summary = ?, etag = ?, product_id = ?, analysis_data_json = ?, updated_at = ?\r\n       WHERE analysis_id = ?`,\r\n      [summary ?? null, etag ?? null, product_id ?? null, analysis_data_json ?? null, new Date().toISOString(), analysisId]\r\n    );\r\n    return;\r\n  }\r\n\r\n  // Set processing\r\n  const nowIso = new Date().toISOString();\r\n  await run(\r\n    db,\r\n    `UPDATE analysis_records SET status = 'processing', updated_at = ? WHERE analysis_id = ?`,\r\n    [nowIso, analysisId]\r\n  );\r\n\r\n  // Decide stub vs real calls (mock path when OPENAI_API_KEY unset)\r\n  const mcpConfigured = Boolean(env.MCP_CONTEXT7_ENDPOINT || env.MCP_SEQUENTIAL_ENDPOINT);\r\n  const openaiConfigured = Boolean(env.OPENAI_API_KEY);\r\n\r\n  let analysisData: ProductAnalysisData;\r\n  let productId: string;\r\n\r\n  try {\r\n    if (!mcpConfigured || !openaiConfigured) {\r\n      // Enhanced mock with structured data\r\n      console.log(`Generating mock analysis for pHash: ${pHash}`);\r\n      analysisData = generateMockAnalysis(pHash);\r\n      productId = await createOrFindProduct(analysisData, db);\r\n    } else {\r\n      // Real AI analysis (future implementation)\r\n      console.log(`Performing AI analysis for pHash: ${pHash}`);\r\n      try {\r\n        const visionResult = await requestGpt4oVision(env, { \r\n          imageUrl: msg.body.image?.url ?? \"about:blank\", \r\n          pHash \r\n        });\r\n        analysisData = await parseAIAnalysis(visionResult.summary || \"\");\r\n        productId = await createOrFindProduct(analysisData, db);\r\n      } catch (aiError) {\r\n        console.warn('AI analysis failed, falling back to mock:', aiError);\r\n        analysisData = generateMockAnalysis(pHash);\r\n        productId = await createOrFindProduct(analysisData, db);\r\n      }\r\n    }\r\n\r\n    // ETag computed from stable payload + schema salt\r\n    const etag = await makeEtag({ analysisId, pHash, analysisData, schemaVersion: env.SCHEMA_VERSION }, env.ETAG_SALT);\r\n\r\n    // Store structured data in database\r\n    await run(\r\n      db,\r\n      `UPDATE analysis_records \r\n       SET status = 'succeeded', \r\n           summary = ?, \r\n           analysis_data_json = ?, \r\n           product_id = ?, \r\n           etag = ?, \r\n           updated_at = ?\r\n       WHERE analysis_id = ?`,\r\n      [\r\n        analysisData.description, // Keep summary for backward compatibility\r\n        JSON.stringify(analysisData),\r\n        productId,\r\n        etag,\r\n        new Date().toISOString(),\r\n        analysisId\r\n      ]\r\n    );\r\n\r\n    console.log(`Analysis completed for ${analysisId}, created product ${productId}`);\r\n  } catch (error) {\r\n    console.error('Analysis worker error:', error);\r\n    await run(\r\n      db,\r\n      `UPDATE analysis_records SET status = 'failed', updated_at = ? WHERE analysis_id = ?`,\r\n      [new Date().toISOString(), analysisId]\r\n    );\r\n  }\r\n}", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\willi\\\\Qwen3Online\\\\backend\\\\.wrangler\\\\tmp\\\\bundle-FBAqQq\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\willi\\\\Qwen3Online\\\\backend\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\willi\\\\Qwen3Online\\\\backend\\\\.wrangler\\\\tmp\\\\bundle-FBAqQq\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\willi\\\\Qwen3Online\\\\backend\\\\.wrangler\\\\tmp\\\\bundle-FBAqQq\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\willi\\\\Qwen3Online\\\\backend\\\\src\\\\index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\willi\\\\Qwen3Online\\\\backend\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\willi\\\\Qwen3Online\\\\backend\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\willi\\\\Qwen3Online\\\\backend\\\\src\\\\index.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "import { handleHealth } from \"./handlers/health\";\r\nimport { handleAnalysisByHash } from \"./handlers/analysis/byHash\";\r\nimport { handleAnalysisAnalyze } from \"./handlers/analysis/analyze\";\r\nimport { handleAnalysisByProductId } from \"./handlers/analysis/byProductId\";\r\nimport { handleSearch } from \"./handlers/search\";\r\nimport { handleHistory } from \"./handlers/history\";\r\nimport { withRateLimit } from \"./lib/rateLimit\";\r\nimport { json, error } from \"./lib/responses\";\r\n\r\nexport interface Env {\r\n  LABELSLAYER_D1: D1Database;\r\n  R2_BUCKET: R2Bucket;\r\n  VECT_INDEX?: VectorizeIndex;\r\n  ANALYSIS_QUEUE: Queue;\r\n  // Vars\r\n  API_VERSION: string;\r\n  SCHEMA_VERSION: string;\r\n  ANALYSIS_QUEUE_NAME: string;\r\n  SIGNED_URL_TTL_SECONDS: number;\r\n  RATE_LIMIT_MAX_MINUTE: number;\r\n  LOG_SAMPLE_RATE?: number;\r\n  MCP_CONTEXT7_ENDPOINT?: string;\r\n  MCP_SEQUENTIAL_ENDPOINT?: string;\r\n  OPENAI_BASE_URL?: string;\r\n  VECTORIZE_DIMENSION?: number;\r\n  CORS_ALLOW_ORIGIN?: string;\r\n  // Secrets (set via wrangler secret)\r\n  OPENAI_API_KEY?: string;\r\n  ETAG_SALT?: string;\r\n}\r\n\r\nfunction addCorsHeaders(resp: Response, env: Env): Response {\r\n  const headers = new Headers(resp.headers);\r\n  const allowOrigin = env.CORS_ALLOW_ORIGIN || \"*\";\r\n  headers.set(\"Access-Control-Allow-Origin\", allowOrigin);\r\n  headers.set(\"Access-Control-Allow-Methods\", \"GET,POST,OPTIONS\");\r\n  headers.set(\"Access-Control-Allow-Headers\", \"Content-Type,If-None-Match,Idempotency-Key\");\r\n  headers.set(\"Access-Control-Expose-Headers\", \"ETag,RateLimit-Limit,RateLimit-Remaining,RateLimit-Reset,X-Schema-Version\");\r\n  // Add schema version for visibility on 200/202 responses\r\n  if (!headers.has(\"X-Schema-Version\") && env.SCHEMA_VERSION) {\r\n    headers.set(\"X-Schema-Version\", env.SCHEMA_VERSION);\r\n  }\r\n  return new Response(resp.body, { status: resp.status, headers });\r\n}\r\n\r\nfunction okJson(data: unknown, env: Env, init?: ResponseInit): Response {\r\n  return addCorsHeaders(json(data, init), env);\r\n}\r\n\r\nfunction errJson(code: string, message: string, status = 400, env?: Env, details?: Record<string, unknown>): Response {\r\n  const resp = error(code, message, status, details);\r\n  return env ? addCorsHeaders(resp, env) : resp;\r\n}\r\n\r\nexport default {\r\n  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\r\n    // CORS preflight\r\n    if (request.method === \"OPTIONS\") {\r\n      return addCorsHeaders(new Response(null, { status: 204 }), env);\r\n    }\r\n\r\n    const url = new URL(request.url);\r\n    const path = url.pathname;\r\n    const method = request.method.toUpperCase();\r\n\r\n    // Apply rate limiting per route\r\n    const rateLimited = async (handler: () => Promise<Response>) => {\r\n      return withRateLimit(request, env, async (rateHeaders: { [k: string]: number }) => {\r\n        const res = await handler();\r\n        const headers = new Headers(res.headers);\r\n        for (const [k, v] of Object.entries(rateHeaders)) {\r\n          headers.set(k, String(v));\r\n        }\r\n        // Ensure schema version visibility on responses that didn't set it\r\n        if (!headers.has(\"X-Schema-Version\") && env.SCHEMA_VERSION) {\r\n          headers.set(\"X-Schema-Version\", env.SCHEMA_VERSION);\r\n        }\r\n        return new Response(res.body, { status: res.status, headers });\r\n      });\r\n    };\r\n\r\n    try {\r\n      // Routing\r\n      if (method === \"GET\" && path === \"/health\") {\r\n        return rateLimited(async () => addCorsHeaders(await handleHealth(request, env), env));\r\n      }\r\n\r\n      if (path === \"/analysis/by-hash\" && method === \"POST\") {\r\n        return rateLimited(async () => addCorsHeaders(await handleAnalysisByHash(request, env, ctx), env));\r\n      }\r\n\r\n      if (path === \"/analysis/analyze\" && method === \"POST\") {\r\n        return rateLimited(async () => addCorsHeaders(await handleAnalysisAnalyze(request, env, ctx), env));\r\n      }\r\n\r\n      if (path === \"/analysis/by-product-id\" && method === \"GET\") {\r\n        return rateLimited(async () => addCorsHeaders(await handleAnalysisByProductId(request, env), env));\r\n      }\r\n\r\n      if (path === \"/search\" && method === \"GET\") {\r\n        return rateLimited(async () => addCorsHeaders(await handleSearch(request, env), env));\r\n      }\r\n\r\n      if (path === \"/history\" && method === \"POST\") {\r\n        return rateLimited(async () => addCorsHeaders(await handleHistory(request, env), env));\r\n      }\r\n\r\n      return addCorsHeaders(\r\n        errJson(\"NOT_FOUND\", `Route ${method} ${path} not found`, 404, env),\r\n        env\r\n      );\r\n    } catch (e: any) {\r\n      const msg = (e && e.message) ? e.message : \"Unexpected error\";\r\n      const resp = errJson(\"INTERNAL_ERROR\", msg, 500, env);\r\n      return addCorsHeaders(resp, env);\r\n    }\r\n  },\r\n\r\n  // Queue consumer (analysis jobs)\r\n  async queue(batch: MessageBatch<any>, env: Env, ctx: ExecutionContext): Promise<void> {\r\n    // Lazy import to avoid cold-start cost on fetch-only\r\n    const { processAnalysisJob } = await import(\"./jobs/analysisWorker\");\r\n    for (const msg of batch.messages) {\r\n      try {\r\n        await processAnalysisJob(msg, env, ctx);\r\n        msg.ack();\r\n      } catch (err) {\r\n        // Rely on queue retry policy from wrangler.toml\r\n        msg.retry();\r\n      }\r\n    }\r\n  },\r\n};", "import { json } from \"../lib/responses\";\r\nimport type { Env } from \"../index\";\r\n\r\nexport async function handleHealth(_req: Request, env: Env): Promise<Response> {\r\n  const body = {\r\n    ok: true,\r\n    service: \"labelslayer-backend\",\r\n    version: env.API_VERSION || \"0.0.0\",\r\n    schemaVersion: env.SCHEMA_VERSION || \"0000\",\r\n    time: new Date().toISOString(),\r\n  };\r\n  return json(body, { status: 200 });\r\n}", "export function withCorsHeaders(init?: ResponseInit, allowOrigin: string = \"*\"): Headers {\r\n  const headers = new Headers(init?.headers || {});\r\n  headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\r\n  headers.set(\"Access-Control-Allow-Origin\", allowOrigin);\r\n  headers.set(\"Access-Control-Allow-Methods\", \"GET,POST,OPTIONS\");\r\n  headers.set(\"Access-Control-Allow-Headers\", \"Content-Type,If-None-Match\");\r\n  headers.set(\"Access-Control-Expose-Headers\", \"ETag,RateLimit-Limit,RateLimit-Remaining,RateLimit-Reset\");\r\n  return headers;\r\n}\r\n\r\nexport function json(data: unknown, init?: ResponseInit): Response {\r\n  const body = JSON.stringify(data);\r\n  const headers = new Headers(init?.headers || {});\r\n  if (!headers.has(\"Content-Type\")) {\r\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\r\n  }\r\n  return new Response(body, { status: init?.status ?? 200, headers });\r\n}\r\n\r\nexport function error(code: string, message: string, status = 400, details?: Record<string, unknown>): Response {\r\n  return json(\r\n    {\r\n      error: {\r\n        code,\r\n        message,\r\n        details: details || {},\r\n      },\r\n    },\r\n    { status }\r\n  );\r\n}\r\n\r\nexport function notModified(etag: string): Response {\r\n  const headers = new Headers();\r\n  headers.set(\"ETag\", etag);\r\n  return new Response(null, { status: 304, headers });\r\n}", "import type { Env } from \"../../index\";\r\nimport { getDb, query, run } from \"../../lib/db\";\r\nimport { error, json, notModified } from \"../../lib/responses\";\r\nimport { makeEtag } from \"../../lib/etag\";\r\nimport { getSignedUrl } from \"../../lib/r2\";\r\nimport type { AnalysisByHashRequest, AnalysisByHashResponse, AnalysisRecordDTO, ProductDTO, ProductAnalysisData } from \"../../types/api\";\r\n\r\nconst PHASH_RE_STRICT = /^[a-f0-9]{16}$/; // exactly 64-bit hex, lowercase enforced below\r\nconst IDEM_TTL_SECONDS = 15 * 60;\r\n\r\nasync function getIdemKey(db: D1Database, key: string) {\r\n  const rows = await query<any>(db, `SELECT key, response_status, response_body, last_seen_at FROM idempotency_keys WHERE key = ? LIMIT 1`, [key]);\r\n  return rows[0] || null;\r\n}\r\nasync function upsertIdemKey(db: D1Database, key: string, method: string, route: string, status?: number, body?: any) {\r\n  const now = new Date().toISOString();\r\n  const bodyStr = typeof body === \"string\" ? body : JSON.stringify(body ?? null);\r\n  await run(db, `INSERT INTO idempotency_keys (key, method, route, first_seen_at, last_seen_at, response_status, response_body)\r\n                 VALUES (?, ?, ?, ?, ?, ?, ?)\r\n                 ON CONFLICT(key) DO UPDATE SET last_seen_at=excluded.last_seen_at, response_status=COALESCE(excluded.response_status, idempotency_keys.response_status), response_body=COALESCE(excluded.response_body, idempotency_keys.response_body)`,\r\n    [key, method, route, now, now, status ?? null, bodyStr ?? null]);\r\n}\r\n\r\nexport async function handleAnalysisByHash(req: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\r\n  let body: AnalysisByHashRequest;\r\n  try {\r\n    body = await req.json();\r\n  } catch {\r\n    return error(\"BAD_JSON\", \"Invalid JSON body\", 400);\r\n  }\r\n  const raw = String(body?.pHash || \"\");\r\n  const pHash = raw.toLowerCase();\r\n  if (!PHASH_RE_STRICT.test(pHash)) {\r\n    return error(\"INVALID_PHASH\", \"pHash must be exactly 16 lowercase hex chars\", 400);\r\n  }\r\n\r\n  const db = getDb(env);\r\n\r\n  // Cache-first: attempt to serve existing record with ETag/304\r\n  const rows = await query<any>(\r\n    db,\r\n    `SELECT analysis_id, product_id, phash, status, summary, etag, image_key, product_name, product_brand, product_upc, updated_at, analysis_data_json\r\n     FROM v_latest_analysis_by_phash WHERE phash = ? LIMIT 1`,\r\n    [pHash]\r\n  );\r\n\r\n  if (rows.length) {\r\n    const r = rows[0];\r\n    \r\n    // Parse structured analysis data if available\r\n    let analysisData: ProductAnalysisData | undefined;\r\n    if (r.analysis_data_json) {\r\n      try {\r\n        analysisData = JSON.parse(r.analysis_data_json);\r\n      } catch (parseError) {\r\n        console.warn('Failed to parse analysis_data_json:', parseError);\r\n        analysisData = undefined;\r\n      }\r\n    }\r\n\r\n    const record: AnalysisRecordDTO = {\r\n      analysisId: String(r.analysis_id),\r\n      productId: r.product_id ? String(r.product_id) : null,\r\n      pHash: String(r.phash),\r\n      status: String(r.status) as any,\r\n      summary: r.summary ?? null,\r\n      etag: r.etag ?? null,\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: r.updated_at ? String(r.updated_at) : new Date().toISOString(),\r\n    };\r\n    const etag = r.etag || (await makeEtag(record, env.ETAG_SALT));\r\n    const ifNone = req.headers.get(\"If-None-Match\");\r\n    if (ifNone && ifNone === etag) {\r\n      return notModified(etag);\r\n    }\r\n\r\n    let signedImageUrl: string | undefined;\r\n    if (r.image_key) {\r\n      signedImageUrl = await getSignedUrl(env, String(r.image_key), Number(env.SIGNED_URL_TTL_SECONDS ?? 900));\r\n    }\r\n\r\n    const product: ProductDTO | null = r.product_id\r\n      ? {\r\n          id: String(r.product_id),\r\n          name: analysisData?.name || String(r.product_name ?? \"Unknown\"),\r\n          brand: r.product_brand ?? null,\r\n          upc: r.product_upc ?? null,\r\n          imageKey: r.image_key ?? null,\r\n        }\r\n      : null;\r\n\r\n    const resp: AnalysisByHashResponse = {\r\n      hit: true,\r\n      record: { \r\n        ...record, \r\n        etag,\r\n        analysisData // Add structured data to response\r\n      },\r\n      product: product ? {\r\n        ...product,\r\n        name: analysisData?.name || product.name || \"Unknown Product\"\r\n      } : null,\r\n      signedImageUrl: signedImageUrl ?? null,\r\n    };\r\n    const res = json(resp, { status: 200 });\r\n    res.headers.set(\"ETag\", etag);\r\n    res.headers.set(\"X-Schema-Version\", env.SCHEMA_VERSION);\r\n    return res;\r\n  }\r\n\r\n  // Miss: honor Idempotency-Key to avoid duplicate enqueues within short window\r\n  const idem = req.headers.get(\"Idempotency-Key\") || undefined;\r\n  if (idem) {\r\n    const existing = await getIdemKey(db, idem);\r\n    if (existing) {\r\n      const ageSec = Math.floor((Date.now() - Date.parse(existing.last_seen_at)) / 1000);\r\n      if (ageSec < IDEM_TTL_SECONDS && existing.response_status) {\r\n        // Replay previous response\r\n        const replayBody = existing.response_body ? JSON.parse(existing.response_body) : {};\r\n        const res = json(replayBody, { status: Number(existing.response_status) });\r\n        res.headers.set(\"X-Idempotent-Replay\", \"1\");\r\n        res.headers.set(\"X-Schema-Version\", env.SCHEMA_VERSION);\r\n        return res;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Ensure image signature exists\r\n  const analysisId = crypto.randomUUID();\r\n  const nowIso = new Date().toISOString();\r\n\r\n  await run(\r\n    db,\r\n    `INSERT OR IGNORE INTO image_signatures (phash, first_seen_at) VALUES (?, ?);`,\r\n    [pHash, nowIso]\r\n  );\r\n\r\n  await run(\r\n    db,\r\n    `INSERT OR IGNORE INTO analysis_records (analysis_id, phash, status, summary, etag, created_at, updated_at)\r\n     VALUES (?, ?, 'queued', NULL, NULL, ?, ?)`,\r\n    [analysisId, pHash, nowIso, nowIso]\r\n  );\r\n\r\n  const job = { analysisId, pHash, r2Key: null as string | null };\r\n  await env.ANALYSIS_QUEUE.send(job);\r\n\r\n  const resp: AnalysisByHashResponse = {\r\n    hit: false,\r\n    jobId: analysisId,\r\n    retryAfterSeconds: 3,\r\n  };\r\n  const res = json(resp, { status: 202 });\r\n  res.headers.set(\"X-Schema-Version\", env.SCHEMA_VERSION);\r\n\r\n  if (idem) {\r\n    await upsertIdemKey(db, idem, \"POST\", \"/analysis/by-hash\", 202, resp);\r\n  }\r\n  return res;\r\n}", "import type { Env } from \"../index\";\r\n\r\nexport async function getSignedUrl(env: Env, key: string, ttlSeconds?: number): Promise<string> {\r\n  const expires = Math.floor(Date.now() / 1000) + (ttlSeconds ?? Number(env.SIGNED_URL_TTL_SECONDS ?? 900));\r\n  if (typeof env.R2_BUCKET.createSignedUrl === \"function\") {\r\n    const signed = await env.R2_BUCKET.createSignedUrl!(key, { method: \"GET\", expires });\r\n    return signed.url;\r\n  }\r\n  // Dev fallback (not actually signed)\r\n  const url = new URL(`https://r2.example/${encodeURIComponent(key)}`);\r\n  url.searchParams.set(\"exp\", String(expires));\r\n  return url.toString();\r\n}", "import type { Env } from \"../../index\";\r\nimport { getDb, run } from \"../../lib/db\";\r\nimport { error, json } from \"../../lib/responses\";\r\nimport type { AnalysisAnalyzeRequest, AnalysisAnalyzeResponse } from \"../../types/api\";\r\n\r\nconst PHASH_RE_STRICT = /^[a-f0-9]{16}$/;\r\n\r\nexport async function handleAnalysisAnalyze(req: Request, env: Env, _ctx: ExecutionContext): Promise<Response> {\r\n  let body: AnalysisAnalyzeRequest;\r\n  try {\r\n    body = await req.json();\r\n  } catch {\r\n    return error(\"BAD_JSON\", \"Invalid JSON body\", 400);\r\n  }\r\n\r\n  if (!body.imageUrl && !body.imageBase64) {\r\n    return error(\"INVALID_INPUT\", \"Provide imageUrl or imageBase64\", 400);\r\n  }\r\n  if (body.pHash) {\r\n    const ph = String(body.pHash).toLowerCase();\r\n    if (!PHASH_RE_STRICT.test(ph)) {\r\n      return error(\"INVALID_PHASH\", \"pHash must be exactly 16 lowercase hex chars\", 400);\r\n    }\r\n    body.pHash = ph;\r\n  }\r\n\r\n  const db = getDb(env);\r\n\r\n  // Idempotency key (soft) \u2014 dedupe enqueue window via analysis_records and image_signatures\r\n  const analysisId = crypto.randomUUID();\r\n  const nowIso = new Date().toISOString();\r\n  const pHash = (body.pHash || \"unknown\").toLowerCase();\r\n\r\n  await run(\r\n    db,\r\n    `INSERT OR IGNORE INTO image_signatures (phash, first_seen_at) VALUES (?, ?);`,\r\n    [pHash, nowIso]\r\n  );\r\n\r\n  await run(\r\n    db,\r\n    `INSERT OR IGNORE INTO analysis_records (analysis_id, phash, status, summary, etag, created_at, updated_at)\r\n     VALUES (?, ?, 'queued', NULL, NULL, ?, ?)`,\r\n    [analysisId, pHash, nowIso, nowIso]\r\n  );\r\n\r\n  // Enqueue job (worker is idempotent on analysis_id)\r\n  const job = {\r\n    analysisId,\r\n    pHash,\r\n    image: body.imageUrl ? { url: body.imageUrl } : { base64Size: body.imageBase64?.length ?? 0 },\r\n  };\r\n  await env.ANALYSIS_QUEUE.send(job);\r\n\r\n  const resp: AnalysisAnalyzeResponse = {\r\n    analysisId,\r\n    status: \"queued\",\r\n    jobId: analysisId,\r\n    retryAfterSeconds: 3,\r\n  };\r\n  const res = json(resp, { status: 202 });\r\n  res.headers.set(\"X-Schema-Version\", env.SCHEMA_VERSION);\r\n  return res;\r\n}", "import type { Env } from \"../../index\";\r\nimport { getDb, query } from \"../../lib/db\";\r\nimport { error, json, notModified } from \"../../lib/responses\";\r\nimport { makeEtag } from \"../../lib/etag\";\r\nimport type { AnalysisByProductIdResponse, AnalysisRecordDTO, ProductAnalysisData } from \"../../types/api\";\r\n\r\nexport async function handleAnalysisByProductId(req: Request, env: Env): Promise<Response> {\r\n  const url = new URL(req.url);\r\n  const productId = url.searchParams.get(\"productId\");\r\n  if (!productId) {\r\n    return error(\"INVALID_INPUT\", \"productId is required\", 400);\r\n  }\r\n\r\n  const db = getDb(env);\r\n  const rows = await query<any>(\r\n    db,\r\n    `SELECT analysis_id, product_id, phash, status, summary, etag, updated_at, analysis_data_json\r\n     FROM analysis_records\r\n     WHERE product_id = ?\r\n     ORDER BY updated_at DESC\r\n     LIMIT 1`,\r\n    [productId]\r\n  );\r\n\r\n  if (!rows.length) {\r\n    return error(\"NOT_FOUND\", \"No analysis found for productId\", 404);\r\n  }\r\n\r\n  const r = rows[0];\r\n  \r\n  // Parse structured analysis data if available\r\n  let analysisData: ProductAnalysisData | undefined;\r\n  if (r.analysis_data_json) {\r\n    try {\r\n      analysisData = JSON.parse(r.analysis_data_json);\r\n    } catch (parseError) {\r\n      console.warn('Failed to parse analysis_data_json:', parseError);\r\n      analysisData = undefined;\r\n    }\r\n  }\r\n\r\n  const record: AnalysisRecordDTO = {\r\n    analysisId: String(r.analysis_id),\r\n    productId: r.product_id ? String(r.product_id) : null,\r\n    pHash: String(r.phash),\r\n    status: String(r.status) as any,\r\n    summary: r.summary ?? null,\r\n    etag: r.etag ?? null,\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: r.updated_at ? String(r.updated_at) : new Date().toISOString(),\r\n  };\r\n  const etag = r.etag || (await makeEtag(record, env.ETAG_SALT));\r\n  const ifNone = req.headers.get(\"If-None-Match\");\r\n  if (ifNone && ifNone === etag) {\r\n    return notModified(etag);\r\n  }\r\n\r\n  const resp: AnalysisByProductIdResponse = { \r\n    hit: true, \r\n    record: { \r\n      ...record, \r\n      analysisData \r\n    }, \r\n    etag \r\n  };\r\n  const res = json(resp, { status: 200 });\r\n  res.headers.set(\"ETag\", etag);\r\n  res.headers.set(\"X-Schema-Version\", env.SCHEMA_VERSION);\r\n  return res;\r\n}", "import type { Env } from \"../index\";\r\nimport { getDb, query } from \"../lib/db\";\r\nimport { json } from \"../lib/responses\";\r\nimport type { SearchResponse } from \"../types/api\";\r\n\r\nexport async function handleSearch(req: Request, env: Env): Promise<Response> {\r\n  const url = new URL(req.url);\r\n  const q = (url.searchParams.get(\"q\") || \"\").trim();\r\n  const limit = Math.min(Number(url.searchParams.get(\"limit\") || 10), 50);\r\n\r\n  if (!q) {\r\n    return json({ results: [] } as SearchResponse, { status: 200 });\r\n  }\r\n\r\n  const like = `%${q.replace(/%/g, \"\").replace(/_/g, \"\")}%`;\r\n  const rows = await query<any>(\r\n    getDb(env),\r\n    `SELECT id, name, brand, upc, image_key\r\n     FROM products\r\n     WHERE name LIKE ? OR brand LIKE ? OR upc LIKE ?\r\n     LIMIT ?`,\r\n    [like, like, like, limit]\r\n  );\r\n\r\n  const results: SearchResponse[\"results\"] = rows.map((r: any) => ({\r\n    product: {\r\n      id: String(r.id),\r\n      name: String(r.name),\r\n      brand: r.brand ?? null,\r\n      upc: r.upc ?? null,\r\n      imageKey: r.image_key ?? null,\r\n    },\r\n    score: 0.5, // simple placeholder score for LIKE-based search\r\n  }));\r\n\r\n  return json({ results } satisfies SearchResponse, { status: 200 });\r\n}", "import type { Env } from \"../index\";\r\nimport { getDb, run } from \"../lib/db\";\r\nimport { error, json } from \"../lib/responses\";\r\nimport type { HistoryRequest, HistoryResponse } from \"../types/api\";\r\n\r\nexport async function handleHistory(req: Request, env: Env): Promise<Response> {\r\n  let body: HistoryRequest;\r\n  try {\r\n    body = await req.json();\r\n  } catch {\r\n    return error(\"BAD_JSON\", \"Invalid JSON body\", 400);\r\n  }\r\n  const events = Array.isArray(body?.events) ? body.events : [];\r\n  if (!events.length) {\r\n    return json({ accepted: 0 } as HistoryResponse, { status: 202 });\r\n  }\r\n\r\n  const db = getDb(env);\r\n  const nowIso = new Date().toISOString();\r\n  let accepted = 0;\r\n  for (const ev of events) {\r\n    try {\r\n      await run(\r\n        db,\r\n        `INSERT INTO user_history (user_id, type, product_id, analysis_id, metadata_json, occurred_at, created_at)\r\n         VALUES (?, ?, ?, ?, ?, ?, ?)`,\r\n        [\r\n          ev.userId ?? null,\r\n          String(ev.type || \"unknown\"),\r\n          ev.productId ?? null,\r\n          ev.analysisId ?? null,\r\n          JSON.stringify(ev.metadata ?? {}),\r\n          ev.occurredAt ?? nowIso,\r\n          nowIso,\r\n        ]\r\n      );\r\n      accepted += 1;\r\n    } catch {\r\n      // swallow individual errors to keep ingestion resilient\r\n    }\r\n  }\r\n\r\n  return json({ accepted } as HistoryResponse, { status: 202 });\r\n}", "type RateHeaders = {\r\n  \"RateLimit-Limit\": number;\r\n  \"RateLimit-Remaining\": number;\r\n  \"RateLimit-Reset\": number;\r\n};\r\n\r\nconst memoryBuckets = new Map<string, { count: number; resetAt: number }>();\r\n\r\nfunction getClientKey(req: Request): string {\r\n  // Trust cf-connecting-ip when present, fallback to remote addr (not available in Workers), else UA hash\r\n  const ip = req.headers.get(\"cf-connecting-ip\") || \"0.0.0.0\";\r\n  const ua = req.headers.get(\"user-agent\") || \"unknown\";\r\n  return `${ip}:${ua.slice(0, 32)}`;\r\n}\r\n\r\nexport async function withRateLimit(\r\n  req: Request,\r\n  env: { RATE_LIMIT_MAX_MINUTE?: number },\r\n  next: (headers: RateHeaders) => Promise<Response>\r\n): Promise<Response> {\r\n  const limit = Number(env.RATE_LIMIT_MAX_MINUTE ?? 120);\r\n  const key = getClientKey(req);\r\n  const now = Date.now();\r\n  const minute = 60 * 1000;\r\n\r\n  let bucket = memoryBuckets.get(key);\r\n  if (!bucket || now > bucket.resetAt) {\r\n    bucket = { count: 0, resetAt: now + minute };\r\n    memoryBuckets.set(key, bucket);\r\n  }\r\n\r\n  if (bucket.count >= limit) {\r\n    const headers: RateHeaders = {\r\n      \"RateLimit-Limit\": limit,\r\n      \"RateLimit-Remaining\": Math.max(0, limit - bucket.count),\r\n      \"RateLimit-Reset\": Math.ceil((bucket.resetAt - now) / 1000),\r\n    };\r\n    return new Response(\r\n      JSON.stringify({\r\n        error: {\r\n          code: \"RATE_LIMITED\",\r\n          message: \"Too Many Requests\",\r\n          details: {},\r\n        },\r\n      }),\r\n      {\r\n        status: 429,\r\n        headers: {\r\n          \"Content-Type\": \"application/json; charset=utf-8\",\r\n          \"RateLimit-Limit\": String(headers[\"RateLimit-Limit\"]),\r\n          \"RateLimit-Remaining\": String(headers[\"RateLimit-Remaining\"]),\r\n          \"RateLimit-Reset\": String(headers[\"RateLimit-Reset\"]),\r\n        },\r\n      }\r\n    );\r\n  }\r\n\r\n  bucket.count += 1;\r\n  const headers: RateHeaders = {\r\n    \"RateLimit-Limit\": limit,\r\n    \"RateLimit-Remaining\": Math.max(0, limit - bucket.count),\r\n    \"RateLimit-Reset\": Math.ceil((bucket.resetAt - now) / 1000),\r\n  };\r\n  return next(headers);\r\n}\r\n\r\n// TODO: Production-grade rate limiting via Durable Object or KV; keep in-memory for dev only.", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n"],
  "mappings": "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",
  "names": ["json", "error", "error", "resp", "res", "PHASH_RE_STRICT", "headers", "processAnalysisJob", "error"]
}
